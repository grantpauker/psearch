#!/bin/bash
folder="/home/god/projects" #Your project folder
backup_exec="/home/god/backups/backup"
basefolder=$(basename $folder)

if [ "$folder" = "" ]; then
  echo "Please specify a project folder"
  return
fi
if [ "$backup_exec" = "" ]; then
  echo "Please specify a backup executable"
  return
fi

ps_help(){
  echo "psearch is a program to naviagte your project folder: \"$folder\""
  echo "Here is a list of its commands:"
  echo "  psearch [project]                                |  Finds a project with the given name and goes to that directory"
  echo "  psearch -l, --list [language]                    |  Lists all projects of a given language, leave blank to just list languages"
  echo "  psearch -g, --get [project]                      |  Finds a project with the given name and copies the directory to the clipboard"
  echo "  psearch -c, --create [language] [project] [file] |  Creates a new project in the given language with the given name"
  echo "  psearch -a, --add [language]                     |  Add a new language folder"
  echo "  psearch -r, --remove [project]                   |  Remove a project folder"
  echo "  psearch -b, --backup [project]                   |  Backup your project folder"
  echo "  psearch -h, --help [language]                    |  Brings up this message"
}

ps_usage(){
  echo "Usage: psearch [-l, --list]  [-g, --get] [-c, --create] [-a, --add] [-r, --remove] [-b, --backup] [-h, --help]"
}

ps_list(){
  if [ ! -d "$folder/$2" ] && [ "$2" != "languages" ]; then
    echo "The language \"$2\" was not found"
    return
  fi
  if [ "$2" = "" ]; then
    found=`find "$folder/$2" -maxdepth 2 -mindepth 2 -type d | grep -v '\.git' |cut -d/ -f5-`
    mapfile -t array <<< "$found"
    for item in ${array[@]:1}
    do
      echo "$item"
    done
  elif [ "$2" = "languages" ]; then
    found=`find "$folder" -maxdepth 1  -type d | grep -v '\.git'|cut -d/ -f4-`
    mapfile -t array <<< "$found"
    for item in ${array[@]:1}
    do
      echo "$item"
    done
  else
    found=`find "$folder/$2" -maxdepth 1 -mindepth 1 -type d | grep -v '\.git' |cut -d/ -f5-`
    mapfile -t array <<< "$found"
    for item in ${array[@]:1}
    do
      echo "$item"
    done
  fi
}

ps_add(){
  if [ -d "$folder/$2" ]; then
    echo "The language \"$2\" already exists"
    echo "Going to \"$basefolder/$2\""
    cd $folder/$2
    return
  else
    mkdir "$folder/$2"
    echo "Created a folder for the language \"$2\""
    echo "Going to \"$basefolder/$2\""
    cd $folder/$2
    return
  fi
}

ps_create(){
  if [ "$3" = "" ]; then
    echo "Please specify a project name"
    return
  fi
  if [ -d "$folder/$2/$3" ]; then
    echo "The project \"$2/$3\" already exits"
    cd $folder/$2/$3
    return
  elif [ ! -d $folder/$2 ]; then
    echo "Language $2 does not exist"
  else
    mkdir "$folder/$2/$3"
    if [ "$4" = "" ]; then
      file_name="$3"
    else
      file_name=`echo $4 | sed 's/\.[^.]*$//'`
    fi
    case "$2" in
    bash) touch $folder/$2/$3/$file_name
        echo "#!/bin/bash" >> $folder/$2/$3/$file_name
        chmod +x $folder/$2/$3/$file_name
        ;;
    c) touch $folder/$2/$3/$file_name.c
        ;;
    python) touch $folder/$2/$3/$file_name.py
        ;;
    javascript)
        touch $folder/$2/$3/$file_name.js
        touch $folder/$2/$3/index.html
        touch $folder/$2/$3/style.css
        ;;
    go) touch $folder/$2/$3/$file_name.go
        ;;
    c++) touch $folder/$2/$3/$file_name.cpp
	       ;;
    haskell) touch $folder/$2/$3/$file_name.hs
    esac
    echo "Created the project \"$2/$3/$file_name\""
    echo "Going to \"$2/$3\""
    cd $folder/$2/$3
    return
  fi

}

ps_remove(){
  found=`find $folder -maxdepth 2 -type d | grep -v '\.git' | grep './'$2'$'`
  found=${found//[.]\//$folder/}
  len=`echo "$found"| wc -l`
  mapfile -t array <<< "$found"
  if [ "$found" = "" ]; then
    echo "No projects with name \"$2\" found"
    echo "Try finding a project using \"psearch -l [language]\"..."
  elif [ $len -gt 1 ]; then
    echo "Multiple instances found, please select a language..."
    i=0
    for item in ${array[@]}
    do
      i=$((i+1))
      item=$(basename $(dirname $item))
      echo "[$i]: $item"
    done
    read -p "Selection: " choice
    choice=$((choice-1))
    read -p "Are you sure you want to delete \"$(basename $(dirname ${array[$choice]}))/$(basename ${array[$choice]})\" (y/n): " are_you_sure
    if [ "$are_you_sure" = "y" ]; then
      read -p "THIS WILL DELETE \"$(basename $(dirname ${array[$choice]}))/$(basename ${array[$choice]})\" (y/n): " are_you_sure
      if [ "$are_you_sure" = "y" ]; then
        echo "Deleting \"$(basename $(dirname ${array[$choice]}))/$(basename ${array[$choice]})\""
        rm -rf ${array[choice]}
        if [ "$PWD" = "$found" ]; then
          cd $(dirname "$found")
        fi
      else
        echo "Not deleting"
        return
      fi
    return
    else
      echo "Not deleting"
      return
    fi
  else
    read -p "Are you sure you want to delete \"$(basename $(dirname $found))/$(basename $found)\" (y/n): " are_you_sure
    if [ "$are_you_sure" = "y" ]; then
      read -p "THIS WILL DELETE \"$(basename $(dirname $found))/$(basename $found)\" (y/n): " are_you_sure
        if [ "$are_you_sure" = "y" ]; then
          echo "Deleting \"$(basename $(dirname $found))/$(basename $found)\""
          rm -rf $found
          if [ "$PWD" = "$found" ]; then
            cd $(dirname "$found")
          fi
          return
        else
          echo "Not deleting"
          return
        fi
    else
      echo "Not deleting"
      return
    fi
  fi
}

ps_backup(){
  bash $backup_exec
}

ps_search(){
  found=`find $folder -maxdepth 2 -regex ".*/$1"  -type d | grep -v '\.git'`
  found=${found//[.]\//$folder/}
  len=`echo "$found"| wc -l`
  mapfile -t array <<< "$found"

  if [ "$found" = "" ]; then
    echo "No projects with name \"$1\" found"
    echo "Try finding a project using \"psearch -l [language]\"..."
    echo "Or create a new project using \"psearch -c [language] [name]\""
    return 1
  elif [ "$len" -gt "1" ]; then
    echo "Multiple instances found, please select a language..."
    i=0
    for item in ${array[@]}
    do
      i=$((i+1))
      item=$(basename $(dirname $item))
      echo "[$i]: $item"
    done
    read -p "Selection: " choice
    choice=$((choice-1))

    ps_found="${array[$choice]}"
  else
    ps_found="$found"
  fi
  return 0
}
ps_go(){
  if ps_search $1 $2 $3 $4; then
    echo "Going to \"$(basename $(dirname $ps_found))/$(basename $ps_found)\""
    cd $ps_found
  fi
}
ps_get(){
  if ps_search $1 $2 $3 $4; then
    echo "Project \"$(basename $(dirname $ps_found))/$(basename $ps_found)\" copied to clipboard"
    echo $ps_found | xclip -sel clip
  fi
}
if [ "$1" = "-h" ]  || [ "$1" = "--help" ]; then #Help
 ps_help $1 $2 $3 $4
elif [ "$1" = "-b" ] || [ "$1" = "--backup" ]; then #Backup
  ps_backup $1 $2 $3 $4
elif [ "$1" = "-l" ] || [ "$1" = "--list" ]; then #Listing
  ps_list $1 $2 $3 $4
elif [ "$1" = "-a" ] || [ "$1" = "--add" ]; then #Adding a new language folder
  ps_add $1 $2 $3 $4
elif [ "$1" = "-c" ] || [ "$1" = "--create" ]; then #Creating a new project
  ps_create $1 $2 $3 $4
elif [ "$1" = "-r" ] || [ "$1" = "--remove" ]; then #Removing a project
  ps_remove $1 $2 $3 $4
elif [ "$1" = "-g" ] || [ "$1" = "--get" ]; then #Removing a project
  ps_get $2 $3 $4
elif [ "${1:0:1}" = "-" ]; then
  echo "Invalid command: $1"
  ps_usage
elif [ "$1" != "" ]; then #Finding and going to a project
  ps_go $1 $2 $3 $4
else #Lists a project if given no paramaters
  ps_list $1 $2 $3 $4
fi
